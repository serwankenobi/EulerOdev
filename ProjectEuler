PROJECT EULER #13
Aşağıdaki 50ye50 basamaklı sayıların, toplamının ilk 10 basamağını bulun.


        s = [
  '37107287533902102798797998220837590246510135740250',
  '46376937677490009712648124896970078050417018260538',
  '74324986199524741059474233309513058123726617309629',
  '91942213363574161572522430563301811072406154908250',
  '23067588207539346171171980310421047513778063246676',
  '89261670696623633820136378418383684178734361726757',
  '28112879812849979408065481931592621691275889832738',
  '44274228917432520321923589422876796487670272189318',
  '47451445736001306439091167216856844588711603153276',
  '70386486105843025439939619828917593665686757934951',
  '62176457141856560629502157223196586755079324193331',
  '64906352462741904929101432445813822663347944758178',
  '92575867718337217661963751590579239728245598838407',
  '58203565325359399008402633568948830189458628227828',
  '80181199384826282014278194139940567587151170094390',
  '35398664372827112653829987240784473053190104293586',
  '86515506006295864861532075273371959191420517255829',
  '71693888707715466499115593487603532921714970056938',
  '54370070576826684624621495650076471787294438377604',
  '53282654108756828443191190634694037855217779295145',
  '36123272525000296071075082563815656710885258350721',
  '45876576172410976447339110607218265236877223636045',
  '17423706905851860660448207621209813287860733969412',
  '81142660418086830619328460811191061556940512689692',
  '51934325451728388641918047049293215058642563049483',
  '62467221648435076201727918039944693004732956340691',
  '15732444386908125794514089057706229429197107928209',
  '55037687525678773091862540744969844508330393682126',
  '18336384825330154686196124348767681297534375946515',
  '80386287592878490201521685554828717201219257766954',
  '78182833757993103614740356856449095527097864797581',
  '16726320100436897842553539920931837441497806860984',
  '48403098129077791799088218795327364475675590848030',
  '87086987551392711854517078544161852424320693150332',
  '59959406895756536782107074926966537676326235447210',
  '69793950679652694742597709739166693763042633987085',
  '41052684708299085211399427365734116182760315001271',
  '65378607361501080857009149939512557028198746004375',
  '35829035317434717326932123578154982629742552737307',
  '94953759765105305946966067683156574377167401875275',
  '88902802571733229619176668713819931811048770190271',
  '25267680276078003013678680992525463401061632866526',
  '36270218540497705585629946580636237993140746255962',
  '24074486908231174977792365466257246923322810917141',
  '91430288197103288597806669760892938638285025333403',
  '34413065578016127815921815005561868836468420090470',
  '23053081172816430487623791969842487255036638784583',
  '11487696932154902810424020138335124462181441773470',
  '63783299490636259666498587618221225225512486764533',
  '67720186971698544312419572409913959008952310058822',
  '95548255300263520781532296796249481641953868218774',
  '76085327132285723110424803456124867697064507995236',
  '37774242535411291684276865538926205024910326572967',
  '23701913275725675285653248258265463092207058596522',
  '29798860272258331913126375147341994889534765745501',
  '18495701454879288984856827726077713721403798879715',
  '38298203783031473527721580348144513491373226651381',
  '34829543829199918180278916522431027392251122869539',
  '40957953066405232632538044100059654939159879593635',
  '29746152185502371307642255121183693803580388584903',
  '41698116222072977186158236678424689157993532961922',
  '62467957194401269043877107275048102390895523597457',
  '23189706772547915061505504953922979530901129967519',
  '86188088225875314529584099251203829009407770775672',
  '11306739708304724483816533873502340845647058077308',
  '82959174767140363198008187129011875491310547126581',
  '97623331044818386269515456334926366572897563400500',
  '42846280183517070527831839425882145521227251250327',
  '55121603546981200581762165212827652751691296897789',
  '32238195734329339946437501907836945765883352399886',
  '75506164965184775180738168837861091527357929701337',
  '62177842752192623401942399639168044983993173312731',
  '32924185707147349566916674687634660915035914677504',
  '99518671430235219628894890102423325116913619626622',
  '73267460800591547471830798392868535206946944540724',
  '76841822524674417161514036427982273348055556214818',
  '97142617910342598647204516893989422179826088076852',
  '87783646182799346313767754307809363333018982642090',
  '10848802521674670883215120185883543223812876952786',
  '71329612474782464538636993009049310363619763878039',
  '62184073572399794223406235393808339651327408011116',
  '66627891981488087797941876876144230030984490851411',
  '60661826293682836764744779239180335110989069790714',
  '85786944089552990653640447425576083659976645795096',
  '66024396409905389607120198219976047599490197230297',
  '64913982680032973156037120041377903785566085089252',
  '16730939319872750275468906903707539413042652315011',
  '94809377245048795150954100921645863754710598436791',
  '78639167021187492431995700641917969777599028300699',
  '15368713711936614952811305876380278410754449733078',
  '40789923115535562561142322423255033685442488917353',
  '44889911501440648020369068063960672322193204149535',
  '41503128880339536053299340368006977710650566631954',
  '81234880673210146739058568557934581403627822703280',
  '82616570773948327592232845941706525094512325230608',
  '22918802058777319719839450180888072429661980811197',
  '77158542502016545090413245809786882778948721859617',
  '72107838435069186155435662884062257473692284509516',
  '20849603980134001723930671666823555245252804609722',
  '53503534226472524250874054075591789781264330331690'];

function add(x, y) {
  var x0 = Number(x.slice(-10));
  var x1 = Number(x.slice(-20, -10));
  var x2 = Number(x.slice(-30, -20));
  var x3 = Number(x.slice(-40, -30));
  var x4 = Number(x.slice(-50, -40));
  var x5 = Number(x.slice(0, -50));
  var y0 = Number(y.slice(-10));
  var y1 = Number(y.slice(-20, -10));
  var y2 = Number(y.slice(-30, -20));
  var y3 = Number(y.slice(-40, -30));
  var y4 = Number(y.slice(-50, -40));
  var y5 = Number(y.slice(0, -50));
  var a0 = x0 + y0;
  var a1 = x1 + y1;
  var a2 = x2 + y2;
  var a3 = x3 + y3;
  var a4 = x4 + y4;
  var a5 = x5 + y5;
  if (a0 >= 10000000000) {
    a0 = a0 - 10000000000;
    a1 = a1 + 1;
  }
  if (a1 >= 10000000000) {
    a1 = a1 - 10000000000;
    a2 = a2 + 1;
  }
  if (a2 >= 10000000000) {
    a2 = a2 - 10000000000;
    a3 = a3 + 1;
  }
  if (a3 >= 10000000000) {
    a3 = a3 - 10000000000;
    a4 = a4 + 1;
  }
  if (a4 >= 10000000000) {
    a4 = a4 - 10000000000;
    a5 = a5 + 1;
  }
  a0 = ("0000000000" + a0).slice(-10);
  a1 = ("0000000000" + a1).slice(-10);
  a2 = ("0000000000" + a2).slice(-10);
  a3 = ("0000000000" + a3).slice(-10);
  a4 = ("0000000000" + a4).slice(-10);
  a5 = ("0000000000" + a5).slice(-10);
  var a = a5 + a4 + a3 + a2 + a1 + a0;
  while (a.slice(0, 1) == '0') {
    a = a.slice(1);
  }
  return a;
}

ans = '0';
for (i in s) {
  ans = add(ans, s[i]);
}

ans = ans.slice(0, 10);

document.write('ANS: ', ans);


________________________________________________________



PROJECT EULER #3
function largestPrimeFactor (num) {
    //bölenleri temsil edecek değişkeni  tanımladım
    let i = 2;
    //bölümü temsil edecek değişken
    let numQuot = num;
    //Tüm bölenleri tutacak dizi
    let primeFactors = [];
    //bölüm 1e eşit oluncaya kadar yürüt
        while(numQuot != 1) {
  /*Sayı i ye tam bölünüyorsa i yi diziye ekliyoruz bölünmüyorsa i yi arttırıyoruz.*/
            if(numQuot % i == 0){
                numQuot /= i;
                primeFactors.push(i);
                i = 2;
            } else {
                i++;
            }
        }
    /*En büyük asal sayıyı en sona koyar. Lenght-1 de dizinin son öğesi demektir.*/
    let biggest = primeFactors[primeFactors.length - 1];
    //Sonuçları yazar.
    console.log(biggest);
}
//Fonksiyonu çağırıyorum.
largestPrimeFactor(100);


________________________________________________________


PROJECT EULER #33
    var divisors = function (number) {
    sqrtNumber = Math.sqrt(number);
    var sum = 1;
    var half = number / 2;
    for (var i = 2; i <= half; i++) {
        if (number % i === 0) { sum += i; }
    }
    if (sum > number) { return true; }
    else { return false; }
};
var abundent = [], k = 0;
var upperLimit = 28123;
for (var i = 1; i <= upperLimit; i++) {
    if (divisors(i)) { abundent[k] = i; k++ };
}
var abundentCount = abundent.length;
var canBeWrittenAsAbundant = [];
for (var i = 0; i < abundentCount; i++) {
    for (var j = i; j < abundentCount; j++) {
        if (abundent[i] + abundent[j] <= upperLimit) { canBeWrittenAsAbundant[abundent[i] + abundent[j]] = true; }
        else {
            break;
        }
    }
}
for (i = 1; i <= upperLimit; i++) {
    if (canBeWrittenAsAbundant[i] == true) { continue; }
    else { canBeWrittenAsAbundant[i] = false; }
}

var sum = 0;
for (i = 1; i <= upperLimit; i++) {
    if (!canBeWrittenAsAbundant[i]) {
        sum += i;
    }
}

console.log(sum);


________________________________________________________


PROJECT EULER #43
   const checkSubString = (d1, d2, d3, prime) => `${d1}${d2}${d3}` % prime === 0;
const main = () => {
  let total = 0;
  const pandigitalNumbers = permut('1234567890').filter(char => char[0] !== '0');
  for (const i of pandigitalNumbers) {
    var d = [...String(i)];
    if (checkSubString(d[1], d[2], d[3], 2) &&
      checkSubString(d[2], d[3], d[4], 3) &&
      checkSubString(d[3], d[4], d[5], 5) &&
      checkSubString(d[4], d[5], d[6], 7) &&
      checkSubString(d[5], d[6], d[7], 11) &&
      checkSubString(d[6], d[7], d[8], 13) &&
      checkSubString(d[7], d[8], d[9], 17)) {
      total += Number(i);
    }
  }
  return total;
};
console.log(main());

function permut(string) {
  const arr = [];
  if (string.length < 2) return string;
  for (let i = 0; i < string.length; i++) {
    const char = string[i];
    if (!string.includes(char)) continue;
    const remainingString = string.slice(0, i) + string.slice(i + 1, string.length);
    for (var subPermutation of permut(remainingString))
      arr.push(char + subPermutation)
  }
  return arr; // 16695334890
}



________________________________________________________



PROJECT EULER #53
const fs = require("fs")

function parseMatrix(matrix) {
  return matrix.toString().trim().split("\n").map((line) => {
    return line.split(",").map((c) => parseInt(c))
  })
}

function bfs(graph, root, target) {
  function neighbors([x, y]) {
    const candidates = [
      [x - 1, y],
      [x + 1, y],
      [x, y - 1],
      [x, y + 1]
    ]
    return candidates.filter(([x, y]) => {
      return x >= 0 && x < graph[0].length && y >= 0 && y < graph.length
    })
  }

  function evaluate(path) {
    return path.reduce((acc, [x, y]) => acc + graph[y][x], 0)
  }

  const start = [root]
  const frontier = [[evaluate(start), start]]
  const explored = new Set()
  while (frontier.length > 0) {
    let path = null
    let min = Infinity
    let index = -1
    frontier.forEach(([score, candidate], i) => {
      if (score < min) {
        min = score
        path = candidate
        index = i
      }
    })
    frontier.splice(index, 1)
    const node = path[path.length - 1]
    explored.add(node.toString())
    if (node.toString() === target.toString()) {
      return min
    }
    neighbors(node).forEach((neighbor) => {
      if (!explored.has(neighbor.toString())) {
        const newPath = path.slice()
        newPath.push(neighbor)
        frontier.push([evaluate(newPath), newPath])
      }
    })
  }
}

const graph = parseMatrix(fs.readFileSync(__dirname + "/matrix.txt"))
console.log(bfs(graph, [0, 0], [graph[0].length - 1, graph.length - 1]))
$ time node --use-strict path-sum.js
real   0m0.666s
user   0m0.895s
sys    0m0.055s
